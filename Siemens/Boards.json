[{
  "_id": {
    "$binary": {
      "base64": "ik3mecnX7ku2t208BRbbWA==",
      "subType": "03"
    }
  },
  "Owner": "c7111522-f519-4fa2-ae80-070e2212c7e8",
  "InviteCode": "PU02ZA",
  "Title": "e-mergency",
  "Columns": [
    {
      "Title": "Backlog",
      "Tickets": [
        {
          "Title": "Cockpit | app-hilfe component vereinfachen und überarbeiten",
          "Description": "<h1>Motivation</h1>\n<p>Die app-hilfe Component ist zu kompliziert und nicht intuitiv in der programmatischen Anwendung und weicht vom Angular Standard ab. Es wird f&uuml;r diese component ein ng-template mit einer Referenz darauf ben&ouml;tigt. Das verursacht unn&ouml;tigen boilerplate und ist kein gutes Konzept. Weiterhin sollte der Inhalt der Hilfe frei stylebar sein, was derzeit durch die enge Verzahnung mit bootsraps rows und columns in der component nicht m&ouml;glich ist. Gegen ein default Style ist nichts einzuwenden, sollte aber &uuml;berschreibar sein.</p>\n<h1>Ziel</h1>\n<p><br>Die app-hilfe component so zu &uuml;berarbeiten (oder neu entwickeln) das die Handhabung ohne ng-template und einer Referenz darauf funktioniert und der Inhalt frei konfigurierbar und stylebar ist.</p>\n<h1>Akzeptanz</h1>\n<p><br>Die Komponente soll so &uuml;berarbeitet werden, das diese nach dem Angular Compoent Standard funktioniert. Der zus&auml;tzlicher Inhalt soll innerheralb des Tags platziert werden k&ouml;nnen und die notwendigen Infos (Id etc.) &uuml;ber ein Input Decorator o.&auml;. hinzugef&uuml;gt werden.<br>Keine Verwendung von ng-content mehr n&ouml;tig!</p>\n<p>Beipiel:</p>\n<p>```<br>// Das ist nur ein Beispiel und keine L&ouml;sungsvorgabe!!!</p>\n<p>// F&uuml;r generische Standard Hilfe anwendung<br>&lt;app-hilfe [szenarioId]=\"hilfeSzenarioId\"&gt;&lt;/app-hilfe&gt;</p>\n<p>// Individueller Content + Hilfe Content<br>&lt;app-hilfe [szenarioId]=\"hilfeSzenarioId\"&gt;<br>&nbsp; &nbsp;&lt;h&gt; Meine fancy Hilfe &lt;/h&gt;</p>\n<p>&nbsp; &nbsp;(Hilfe Hilfe Content hier)</p>\n<p>&nbsp; &nbsp;&lt;button&gt;Click mich hart&lt;/button&gt;<br>&lt;/app-hilfe&gt;</p>\n<p><br>```</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Sprachen Component",
          "Description": "<h1>Motivation</h1>\n<p>Derzeit ist es so das es keine einheitliche M&ouml;glichkeit gibt die Sprachsteuerung &nbsp;in die Panelbar zu integrieren. (siehe Screenshot)</p>\n<h1>Ziel</h1>\n<p>Ziel ist es eine M&ouml;glichkeit zu schaffen, die es erlaubt m&ouml;glichst einfach die Sprachewahl als klickbare Button zu integrieren. Ob ein Control daf&uuml;r neu geschaffen wird oder ob die Panelbar mit diesem Feature erweitert wird oder ob eine sonstige, praktikable L&ouml;sung daf&uuml;r gefunden wird, liegt in der Verantwortung des Entwicklers.</p>\n<h1>Kriterien</h1>\n<p>Die Sprachwahl soll in Zukunft einfach in die Panelbar zu integrieren sein, ohne stylische scss Anpassung zuk&uuml;nftig anzuwenden. Vom generischen Design soll die Sprachauswahl so wie auf dem Screenshot aussehen.</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Synchronisationsperformance",
          "Description": "<p>Motivation<br>-------------------------------<br>Die Synchronisation des Content in der App dauert nach einem Deployment sehr lange. Extrem ist es, wenn der Kunde mehr als 1 Content Sprache hat.</p>\n<p>Beschreibung<br>------------------------------<br>Es soll analysiert werden, weshalb die Synchronisation so lange dauert und wie dies verbessert werden kann.</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Usability",
              "Color": "#6fd9bb"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Alarmserver | Einwählen in Telco per Telefon ohne App",
          "Description": "<p>System pr&uuml;ft, ob die anrufende Nummer f&uuml;r eine noch aktive Telco angerufen wurde. Falls ja, wird der Benutzer in Telco aufgenommen, sonst ert&ouml;nt der Standardtext.&nbsp;</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "App | Error Response bei Alarm API in App abfangen",
          "Description": "<p>Wird &uuml;ber die App ein Alarm ausgel&ouml;st, und die Alarm API den Alarm nicht versendet, wird in der App trotzdem eine Successmeldung angezeigt.</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Bug",
              "Color": "#ff2e6f"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit App | 80er Jahre Icons durch moderne/zeitgemässe Icons ersetzen",
          "Description": "<p>Derzeit werden Icons verwendet die nicht mehr State of the art sind, altbacken wirken und aussehen. Mit diesem Task soll evaluiert werden, welche Library f&uuml;r einen effektives update geeignet ist.</p>\n<p>Beispiel f&uuml;r modernes Look &amp; Feel:</p>\n<p><img src=\"https://trello.com/1/cards/63f8c284ef3edc9c2c4cd5b5/attachments/63f8c4abeaedc33377b50fa2/download/image.png\"></p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Usability",
              "Color": "#6fd9bb"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Aufwandschätzung für Umstellung auf Reactive Forms und Angular Standards (z.B. Validierung)",
          "Description": "<p>Beschreibung</p>\n<p>------------------</p>\n<p>Derzeit ist es so, dass sich teilweise nicht an die Code Guidelines von Angular gehalten wird und es wird Template Driven als Designansatz verwendet. &nbsp;Im diesen Task soll eine Aufwandsch&auml;tzung f&uuml;r folgende Punkte durchgef&uuml;hrt werden.</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Nicht Standardmässiger Inhalt",
          "Description": "<p>Messe Basel<br>-------------------------<br>- Link zu Externer Seite: (Schutzkonzept/Infos --&gt; Event Kalender, MCH Schutzkonzept, Impfzentrum Basel)<br>- Link zu Seite innerhalb der App: (Brandalarm --&gt; 4. Weitere Massnahmen, EVAK Anweisungen --&gt; 2. EVAK Wartezone)<br>- Link zu Telefonnummer/Email (TELEFONLISTEN --&gt; Partner Messen + Events, Partner Geb&auml;ude, Logistik Umfeld Parkhaus Checkpoint, Beh&ouml;rden &Auml;mter Versicherung, &Auml;rzte Spit&auml;ler)</p>\n<p>Messe Z&uuml;rich<br>-------------------------<br>- Link zu Externer Seite: (Telefonliste/ Covid-19 News)<br>- Link zu Telefonnummer/Email (Telefonliste/ Covid-19 News)<br>- Zur&uuml;ck Button (Evakuation/Pl&auml;ne)<br>- Button Custom Icon (Samariter) (1. Alarmieren)</p>\n<p>Zoo Berlin<br>-------------------------<br>- Texte vorhanden mit Links (CVD/Tierpark-Mitarbeiter/Alfred-Brehm-Haus/Brandmeldezentrale/BMZ)</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "ToCheck",
              "Color": "#e571ff"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | ZHAW Alarmserver SMS bei Anruf auslösen",
          "Description": "<p>Motivation<br>----------------------------<br>Da die Certas rel. lange braucht, bis Sie sich nach einem Alarm mit dem Koffer verbindet und das Ausl&ouml;sen des SMS vom Koffer oft auch nach dem Anruf kommt, soll dass SMS vom ZHAW Alarmserver ausgel&ouml;st werden.</p>\n<p>Beschreibung<br>----------------------------<br>Wenn ein Alarmanruf eines Koffers auf dem Alarmserver eingeht, muss Parallel ein Alarm &uuml;ber die API an die Certas geschickt werden. Die Implementierung muss Asynchron gemacht werden, so dass beide Prozesse Parallel laufen.</p>\n<p><br>Akzeptanzkriterien<br>----------------------------<br>* Es wird ein API Call f&uuml;r die Benachrichtigung ausgel&ouml;st wenn ein Anruf eingeht</p>\n<p>Tests<br>----------------------------<br>* Manuell testen</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Verwaltung der Tags für Manager konsolidieren",
          "Description": "<p>Motivation<br>-----------------------------<br>Es wurde festgestellt, dass ein Manager bei einem Standort alle Tags zuweisen kann. Im Moment ist es daher m&ouml;glich, dass sich ein Manager Inhalt freischalten kann, der nicht f&uuml;r ihn bestimmt ist.</p>\n<p>Beschreibung<br>-----------------------------<br>Es muss definiert werden, wer welche Tags auf einem Standort zuweisen. In welchem Case die Tags von einem bestehenden Standort &uuml;bernommen werden m&uuml;ssen. Im Unterschied zum Standortspezifischen Inhalt (Alter WAMS Code) w&auml;ren neu Kombinationen von Tags m&ouml;glich. Wie soll sich das ganze verhalten. Das ganze muss auch f&uuml;r die Projekte definiert werden. Dort ist es im Moment so, dass man nur Tags zuweisen kann, die einem Standort des Benutzers zugewiesen sind. Aber auch da sind Kombinationen m&ouml;glich.</p>\n<p>Akzeptanzkriterien<br>-----------------------------<br>[TODO]</p>\n<p>Test<br>-----------------------------<br>[TODO]</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [],
          "Tasks": []
        }
      ]
    },
    {
      "Title": "to estimate",
      "Tickets": [
        {
          "Title": "Ressourcen Texte im Backend migrieren",
          "Description": "<p>Im Backend werden noch einige Ressourcen aus dem NotfallApp.resx verwendet. Diese sollten aus den neuen Emer____.resx Files geladen werden</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "ToCheck",
              "Color": "#e571ff"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Benutzer \"anonymous\" in Auditfeldern mit Benutzernamen ersetzen",
          "Description": "<h1>Motivation</h1>\n<p>\"anonymous\" in Auditfeldern hat keinen Informationsgehalt</p>\n<h1>Beschreibung</h1>\n<p>In den beiden Audit-Feldern INS_USER und UPD_USER soll anstatt \"anonymous\" der jeweilige Benutzername eingef&uuml;gt werden.&nbsp;</p>\n<p>In zweiter Priorit&auml;t sollen die bestehenden Daten korrigiert werden (falls m&ouml;glich).</p>\n<h1>Akzeptanzkriterien</h1>\n<p>keine</p>\n<h1>Tests</h1>\n<p>keine</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Bug",
              "Color": "#ff2e6f"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Kanäle bei Alarmplan aufgrund Vorlage",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Konzept Aufbau Angular App",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Alleinarbeitstimer beenden, wenn Alarmknopf gedrückt wurde",
          "Description": "<p>... oder Alarm nicht erneut ausl&ouml;sen?</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "ToCheck",
              "Color": "#e571ff"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Konzept für Migration Wizard Nachrichtencenter",
          "Description": "<p>Motivation<br>----------------------------------------------<br>Das Nachrichtencenter soll &uuml;berarbeitet werden. Es muss ein Weg gefunden werden, wie man vom alten zum neuen UI kommt, so dass immer wieder Released werden kann.</p>\n<p>Beschreibung<br>----------------------------------------------<br>Die n&ouml;tigen Changes sollen aufgrund der neuen Mockups aufgelistet und beschrieben werden. Daraus soll nach einem Review eine Liste von Tickets erzeugt werden, welche in den folgenden Sprints umgesetzt werden</p>\n<p>Akzeptanzkriterien<br>----------------------------------------------<br>* Konzept f&uuml;r Migration erstellt</p>\n<p>Tests<br>---------------------------------------------<br>* Keine</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Usability",
              "Color": "#6fd9bb"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Versand von E-Mails, Push, SIP",
          "Description": "<p>Cockpit | Beim Versand von E-Mails, Push, SIP &uuml;ber den Hangfire wird der Kommunikationsstatus nicht in den Batch eingebunden</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Usability",
              "Color": "#6fd9bb"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "URL in Mandantentabelle für Testumgebung anpassen",
          "Description": "<p>Die Tests: \"RegistrierungEventCodeTokenExistingEmail\" und \"RegistrierungEventCodeExistingMobile\" funktionieren lokal nicht, da im Testsskript die URL falsch ist.</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Optimierung/Cleanup Deployment Prozess",
          "Description": "<p>Deployment Service Refactoring, es wird an diverse Orten durch den Structure Tree iteriert und die Module der Seite geladen, dies k&ouml;nnte z. B. an nur einem Ort gemacht werden.</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": []
        }
      ]
    },
    {
      "Title": "approved to implement",
      "Tickets": [
        {
          "Title": "App | Alleinarbeits-Position in der App löschen",
          "Description": "<p>## Motivation</p>\n<p>Das Betreibungs- und Konkursamt SG m&ouml;chte mehrere Alleinarbeits-Positionen gleichzeitig l&ouml;schen. Dazu werden zwei User Stories umgesetzt:</p>\n<p>&nbsp;</p>\n<p><img src=\"https://trello.com/1/cards/642d3f2c19dee0cb5be6cbc9/attachments/642d899fa56fcc1e0e023ca9/previews/642d89a0a56fcc1e0e023cb4/download/1cb9336a-ca43-45ff-98c2-fc33c09b0ae1.jpg\"></p>\n<p>1. Um Alleinarbeits-Positionen schneller zu l&ouml;schen, entfernen wir die Sicherheitsabfrage beim L&ouml;schen von Alleinarbeits-Positionen. Damit k&ouml;nnen Alleinarbeits-Positionen mit einem Klick gel&ouml;scht werden. Da eine Alleinarbeits-Position sehr schnell neu erstellt werden kann und beim L&ouml;schnen somit nur sehr wenig Informationen verloren gehen, ist die Sicherheitsabfrage nicht notwendig.<br>2. aktuelle User Story: Eine Position soll auch in der App gel&ouml;scht werden k&ouml;nnen.</p>\n<p>## Beschreibung<br>Wenn ein App-Anwender auf den Knopf \"Positionen l&ouml;schen\" tippt, wird der Dialog mit den Positionen angezeigt, wo der App-Anwender eine Position mit Tippen auf das Papierkorb-Symbol l&ouml;schen kann. Analog zum Cockpit soll auch hier **keine **Sicherheitsabfrage kommen.</p>\n<p>## Akzeptanzkriterien<br>* siehe Mockups<br>* Erkl&auml;rtext: \"Positionen k&ouml;nnen nur gel&ouml;scht werden, wenn kein Benutzer an dieser Position angemeldet ist.\"<br>* Als CSS ist Bootstrap3 als Grundlage zu verwenden</p>\n<p>## Tests<br>- L&ouml;schen einer Position, welche mind. eine Anmeldung hat &gt; Position darf nicht gel&ouml;scht werden<br>- L&ouml;schen einer Position, welche keine Anmeldung hat &gt; Position muss gel&ouml;scht werden</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Update auf Angular 15+ prüfen",
          "Description": "<p>## Beschreibung</p>\n<p>Aktuell verwendet das Cockpit die Angular Version 9, aber die Version 15 ist derzeit die aktuelle Version von Angular.</p>\n<p>Ein Update von V9 auf V15 w&uuml;rde &uuml;ber 60 &Uuml;berpr&uuml;fungen/&Auml;nderung am Projekt mit sich bringen. Also ist es zwingend notwending, ein Update &nbsp;durchzuf&uuml;hren.</p>\n<p>[https://update.angular.io/?v=9.0-15.0](https://update.angular.io/?v=9.0-15.0 \"smartCard-inline\")</p>\n<p>Mit diesem Ticket soll der Aufwand und die Machbarkeit eines Updates gepr&uuml;ft werden.</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Update WAMS 3.12.1",
          "Description": "<p>Motivation<br>---------------------------------------------------<br>WAMS 3.12.0 verwendet aktuell noch KnockoutJS in einer Version die Security Issues hat.</p>\n<p>Beschreibung<br>--------------------------------------------------<br>Update der Nuget Packages auf WAMS 3.12.1. KnockoutJS wurde in dieser Version ausgebaut.&nbsp;</p>\n<p>&gt; Die &Auml;nderung wurde in WAMS implementiert. Es gibt aber noch kein Nuget Package.</p>\n<p>Akzeptanzkriterien<br>-----------------------------<br>* JS Files d&uuml;rfen keine Referenz mehr auf Knockout haben</p>\n<p>Tests<br>-------------------------<br>* Bestehende Tests gehen weiterhin</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Krisenteams - Umbau Response Request Models",
          "Description": "<p>## Beschreibung</p>\n<p>Aktuell enthalten Response Models oft die selben State Informationen, welche immer wieder ben&ouml;tigt werden. z.B Sprachen, CurrentSprache, DefaultSprache, BenutzerRechte, Verwaltungseinheiten etc.</p>\n<p>Diese Properities k&ouml;nnen in eigene State Models/Interfaces abstrahiert werden. Welche von der API in dem Response Model zur&uuml;ckgegeben werden. Anstellen von DefaultSprache, CurrentSprache und Sprachen k&ouml;nnte das Response Objekt nur ein SpracheState Objekt enthalten.</p>\n<p>Zudem sollen Konventionen erstellt werden, wo die Request und Response Interfaces und shared State Interfaces im Client abgelegt werden sollen. Die Namings der StateInterfaces sollen in Konvetionen dokumentiert werden.</p>\n<p>## Akzeptanzkriterien</p>\n<p>- Alle guidelines wurden beachtet<br>- Tests sind gr&uuml;n</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 3,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": [
            {
              "IsDone": false,
              "Text": "Request / Response models erstellen (in front und backend)"
            },
            {
              "IsDone": false,
              "Text": "Services und Controllers anpassen"
            },
            {
              "IsDone": false,
              "Text": "Bestehende ViewModels in frontend zu models / dtos"
            }
          ]
        },
        {
          "Title": "Cockpit | Benutzer - Umbau Response Request Models",
          "Description": "<p>## Beschreibung</p>\n<p>Aktuell enthalten Response Models oft die selben State Informationen, welche immer wieder ben&ouml;tigt werden. z.B Sprachen, CurrentSprache, DefaultSprache, BenutzerRechte, Verwaltungseinheiten etc.</p>\n<p>Diese Properities k&ouml;nnen in eigene State Models/Interfaces abstrahiert werden. Welche von der API in dem Response Model zur&uuml;ckgegeben werden. Anstellen von DefaultSprache, CurrentSprache und Sprachen k&ouml;nnte das Response Objekt nur ein SpracheState Objekt enthalten.</p>\n<p>Zudem sollen Konventionen erstellt werden, wo die Request und Response Interfaces und shared State Interfaces im Client abgelegt werden sollen. Die Namings der StateInterfaces sollen in Konvetionen dokumentiert werden.</p>\n<p>## Akzeptanzkriterien</p>\n<p>- Alle guidelines wurden beachtet<br>- Tests sind gr&uuml;n</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 3,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": [
            {
              "IsDone": false,
              "Text": "Request / Response models erstellen (in front und backend)"
            },
            {
              "IsDone": false,
              "Text": "Services und Controllers anpassen"
            },
            {
              "IsDone": false,
              "Text": "Bestehende ViewModels in frontend zu models / dtos"
            }
          ]
        },
        {
          "Title": "Cockpit | Rechnungsposten - Umbau",
          "Description": "<p>## Beschreibung</p>\n<p>Aktuell enthalten Response Models oft die selben State Informationen, welche immer wieder ben&ouml;tigt werden. z.B Sprachen, CurrentSprache, DefaultSprache, BenutzerRechte, Verwaltungseinheiten etc.</p>\n<p>Diese Properities k&ouml;nnen in eigene State Models/Interfaces abstrahiert werden. Welche von der API in dem Response Model zur&uuml;ckgegeben werden. Anstellen von DefaultSprache, CurrentSprache und Sprachen k&ouml;nnte das Response Objekt nur ein SpracheState Objekt enthalten.</p>\n<p>Zudem sollen Konventionen erstellt werden, wo die Request und Response Interfaces und shared State Interfaces im Client abgelegt werden sollen. Die Namings der StateInterfaces sollen in Konvetionen dokumentiert werden.</p>\n<p>## Akzeptanzkriterien</p>\n<p>- Alle guidelines wurden beachtet<br>- Tests sind gr&uuml;n</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 2,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": [
            {
              "IsDone": false,
              "Text": "Request / Response models erstellen (in front und backend)"
            },
            {
              "IsDone": false,
              "Text": "Services und Controllers anpassen"
            }
          ]
        },
        {
          "Title": "Cockpit | Rechnungsposten - Umbau Response Request Models",
          "Description": "<p>## Beschreibung</p>\n<p>Aktuell enthalten Response Models oft die selben State Informationen, welche immer wieder ben&ouml;tigt werden. z.B Sprachen, CurrentSprache, DefaultSprache, BenutzerRechte, Verwaltungseinheiten etc.</p>\n<p>Diese Properities k&ouml;nnen in eigene State Models/Interfaces abstrahiert werden. Welche von der API in dem Response Model zur&uuml;ckgegeben werden. Anstellen von DefaultSprache, CurrentSprache und Sprachen k&ouml;nnte das Response Objekt nur ein SpracheState Objekt enthalten.</p>\n<p>Zudem sollen Konventionen erstellt werden, wo die Request und Response Interfaces und shared State Interfaces im Client abgelegt werden sollen. Die Namings der StateInterfaces sollen in Konvetionen dokumentiert werden.</p>\n<p>## Akzeptanzkriterien</p>\n<p>- Alle guidelines wurden beachtet<br>- Tests sind gr&uuml;n</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 2,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [
            {
              "_id": "c7111522-f519-4fa2-ae80-070e2212c7e8",
              "Username": "Dario",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": false,
              "Text": "Request / Response models erstellen (in front und backend)"
            },
            {
              "IsDone": false,
              "Text": "Services und Controllers anpassen"
            }
          ]
        },
        {
          "Title": "Cockpit | Nachricht-Center - Umbau Response Request Models",
          "Description": "<p>## Beschreibung</p>\n<p>Aktuell enthalten Response Models oft die selben State Informationen, welche immer wieder ben&ouml;tigt werden. z.B Sprachen, CurrentSprache, DefaultSprache, BenutzerRechte, Verwaltungseinheiten etc.</p>\n<p>Diese Properities k&ouml;nnen in eigene State Models/Interfaces abstrahiert werden. Welche von der API in dem Response Model zur&uuml;ckgegeben werden. Anstellen von DefaultSprache, CurrentSprache und Sprachen k&ouml;nnte das Response Objekt nur ein SpracheState Objekt enthalten.</p>\n<p>Zudem sollen Konventionen erstellt werden, wo die Request und Response Interfaces und shared State Interfaces im Client abgelegt werden sollen. Die Namings der StateInterfaces sollen in Konvetionen dokumentiert werden.</p>\n<p>## Akzeptanzkriterien</p>\n<p>- Alle guidelines wurden beachtet<br>- Tests sind gr&uuml;n</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 3,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [],
          "Tasks": [
            {
              "IsDone": false,
              "Text": "Request / Response models erstellen (in front und backend)"
            },
            {
              "IsDone": false,
              "Text": "Services und Controllers anpassen"
            },
            {
              "IsDone": false,
              "Text": "Bestehende ViewModels in frontend zu models / dtos"
            }
          ]
        }
      ]
    },
    {
      "Title": "Sprint",
      "Tickets": [
        {
          "Title": "*** Ready for Demo ***",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "*** Sprint 06.04.2022 (167) ***",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Integration der Unit Test Projekte in den Build Prozess",
          "Description": "<p>Beschreibung<br>-------------------------------------<br>Alle Unit Tests Projekte in die Build Pipeline integrieren</p>\n<p>Zudem gibt es noch ein UnitTest Projekt f&uuml;r BI.ZH.BUSINESS. Diese Tests in das Cockpit Test Projekt verschieben</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 2,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [
            {
              "_id": "c7111522-f519-4fa2-ae80-070e2212c7e8",
              "Username": "Dario",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": false,
              "Text": "In Cake die Unit Test Projekte aufrufen (Unit Tests Bereich)"
            },
            {
              "IsDone": false,
              "Text": "Unit Tests für Business (BI.ZH) verschieben"
            }
          ]
        },
        {
          "Title": "Cockpit | Migration Nachrichten Controller auf .NET Core",
          "Description": "<h1>Motivation</h1>\n<p>Projekt &ldquo;[bi.zh.ch.notfall-app.web](http://bi.zh.ch.notfall-app.web \"&zwnj;\")&rdquo; soll auf .NET Core migriert werden.</p>\n<h1>Beschreibung</h1>\n<p>Die API &ldquo;NachrichtenV5Controller&rdquo; muss in den Container &ldquo;emergency.ch.app.api&rdquo; migriert werden. Dazu muss ein API Controller erstellt werden und die ganze Business Logik so angepasst werden, dass diese aus dem .NET Core Projekt aufgerufen werden kann.</p>\n<p>Nach M&ouml;glichkeit sollen auch gleich Unit Tests f&uuml;r diese Logik implementiert werden.</p>\n<p>Auf Grund der hohen Komplexit&auml;t dieser Komponente wird ein Branch/PR pro API Endpoint erstellt. Ziel soll sein, dass die PR's verh&auml;ltnism&auml;ssig kein bleiben.</p>\n<h1>Akzeptanzkriterien</h1>\n<p>- API funktioniert auf .NET Core<br>- &Uuml;ber den NGINX Container kann die API Url auf .NET Core umgestellt werden und die Tests laufen durch.</p>\n<h1>Tests</h1>\n<p>- Bestehende Tests funktionieren weiterhin<br>- Integration von Unit Tests wo es Sinn macht.</p>",
          "PullRequestUrl": "http://vgeneral17:8080/tfs/ExanicAG/emergency.ch.application/_git/emergency.ch.application.cockpit/pullrequest/5570?_a=overview",
          "TestRunUrl": "http://jenkins.exanic.local/job/e-mergency.ch.application.nightlybuild/4280/",
          "CompletedChecks": 2,
          "TotalChecks": 2,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [
            {
              "_id": "8309d09f-9a32-401e-ac04-52fdef9a37c3",
              "Username": "Philipp",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": true,
              "Text": "GetAufgebotsplaene"
            },
            {
              "IsDone": true,
              "Text": "GetKrisenteams"
            }
          ]
        },
        {
          "Title": "Cockpit | Migration Projekte Controller auf .NET Core",
          "Description": "<h1>Motivation</h1>\n<p>Projekt &ldquo;[bi.zh.ch.notfall-app.web](http://bi.zh.ch.notfall-app.web \"&zwnj;\")&rdquo; soll auf .NET Core migriert werden.</p>\n<h1>Beschreibung</h1>\n<p>Die API &ldquo;NachrichtenV5Controller&rdquo; muss in den Container &ldquo;emergency.ch.app.api&rdquo; migriert werden. Dazu muss ein API Controller erstellt werden und die ganze Business Logik so angepasst werden, dass diese aus dem .NET Core Projekt aufgerufen werden kann.</p>\n<p>Nach M&ouml;glichkeit sollen auch gleich Unit Tests f&uuml;r diese Logik implementiert werden.</p>\n<p>Auf Grund der hohen Komplexit&auml;t dieser Komponente wird ein Branch/PR pro API Endpoint erstellt. Ziel soll sein, dass die PR's verh&auml;ltnism&auml;ssig kein bleiben.</p>\n<h1>Akzeptanzkriterien</h1>\n<p>- API funktioniert auf .NET Core<br>- &Uuml;ber den NGINX Container kann die API Url auf .NET Core umgestellt werden und die Tests laufen durch.</p>\n<h1>Tests</h1>\n<p>- Bestehende Tests funktionieren weiterhin<br>- Integration von Unit Tests wo es Sinn macht.</p>",
          "PullRequestUrl": "http://vgeneral17:8080/tfs/ExanicAG/emergency.ch.application/_git/emergency.ch.application.cockpit/pullrequest/5570?_a=overview",
          "TestRunUrl": "http://jenkins.exanic.local/job/e-mergency.ch.application.nightlybuild/4280/",
          "CompletedChecks": 6,
          "TotalChecks": 6,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [
            {
              "_id": "d80c6fe4-3c1f-4fdb-8e1d-368e521d98b8",
              "Username": "Sven",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": true,
              "Text": "GetBenutzerByPhone"
            },
            {
              "IsDone": true,
              "Text": "GetProjekte"
            },
            {
              "IsDone": true,
              "Text": "Get"
            },
            {
              "IsDone": true,
              "Text": "Post"
            },
            {
              "IsDone": true,
              "Text": "Delete"
            },
            {
              "IsDone": true,
              "Text": "Testing"
            }
          ]
        },
        {
          "Title": "Cockpit | Sicherheitsabfrage beim Löschen von Positionen entfernen {3h}",
          "Description": "<p>## Motivation<br>Das Betreibungs- und Konkursamt SG m&ouml;chte mehrere Alleinarbeits-Positionen gleichzeitig l&ouml;schen. Dazu werden zwei User Stories umgesetzt:</p>\n<p>1. aktuelle User Story: Um Alleinarbeits-Positionen schneller zu l&ouml;schen, entfernen wir die Sicherheitsabfrage beim L&ouml;schen von Alleinarbeits-Positionen. Damit k&ouml;nnen Alleinarbeits-Positionen mit einem Klick gel&ouml;scht werden. Da eine Alleinarbeits-Position sehr schnell neu erstellt werden kann und beim L&ouml;schnen somit nur sehr wenig Informationen verloren gehen, ist die Sicherheitsabfrage nicht notwendig.<br>2. https://trello.com/c/7so3Y6qu: Eine Position soll auch in der App gel&ouml;scht werden k&ouml;nnen.</p>\n<p>## Beschreibung<br>Beim L&ouml;schen einer Alleinarbeits-Position im Standortdetail soll die Sicherheitsabfrage entfernt werden, so dass die Alleinarbeits-Position nach dem Klicken auf das Papierkorb-Symbol direkt gel&ouml;scht wird.</p>\n<p>## Akzeptanzkriterien<br>keine</p>\n<p>## Tests<br>vorhandene Tests anpassen</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            },
            {
              "Title": "Usability",
              "Color": "#6fd9bb"
            }
          ],
          "Users": [
            {
              "_id": "8309d09f-9a32-401e-ac04-52fdef9a37c3",
              "Username": "Philipp",
              "Boards": []
            },
            {
              "_id": "ad28807b-adb6-4f9c-bfb3-b114c07a4524",
              "Username": "Pablo",
              "Boards": []
            }
          ],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Component für On/Off Schalter in App {8h}",
          "Description": "<p>## Motivation</p>\n<p>In der App wird eine Checkbox im Style eines Ein/Ausschalters (Switch) verwendet. Die Checkbox wird nun an mehr als 1 Ort verwendet.</p>\n<p>## Beschreibung</p>\n<p>Es soll daraus eine Component erstellt werden, welche das ControlValueAccessor Interface implementiert. Als Base Klasse f&uuml;r die Logik kann NgCheckboxCommon aus der NgBootstrap Library verwendet werden. Als Basis kann die Component NgCheckboxComponent kopiert werden und der Markup entsprechend den Anforderungen gesetzt werden.</p>\n<p>Der Bestehende Markup in der App (Position hinzuf&uuml;gen und Aufgaben&uuml;bersicht) kann durch die neue Component ersetzt werden.</p>\n<p>Es ist der bestehende CSS Code zu verwenden.</p>\n<p>## Akzeptanzkriterien</p>\n<p>* Component kann via NgModel gebunden werden<br>* Component gibt Markup vor</p>\n<p>## Tests</p>\n<p>* Pr&uuml;fen ob Position Add und Aufgaben funktioniert</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 4,
          "TotalChecks": 4,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [
            {
              "_id": "cf33ef37-1200-4ab6-b99a-e1801c3109ee",
              "Username": "Gian",
              "Boards": []
            },
            {
              "_id": "c7111522-f519-4fa2-ae80-070e2212c7e8",
              "Username": "Dario",
              "Boards": []
            },
            {
              "_id": "ad28807b-adb6-4f9c-bfb3-b114c07a4524",
              "Username": "Pablo",
              "Boards": []
            },
            {
              "_id": "8309d09f-9a32-401e-ac04-52fdef9a37c3",
              "Username": "Philipp",
              "Boards": []
            },
            {
              "_id": "354f7f0c-7ba2-431f-ba5c-4ff571349397",
              "Username": "Marco",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": true,
              "Text": "Template "
            },
            {
              "IsDone": true,
              "Text": "Control erstellen"
            },
            {
              "IsDone": true,
              "Text": "Control in Aufgaben ersetzen"
            },
            {
              "IsDone": true,
              "Text": "Control in Position erstellen ersetzen"
            }
          ]
        },
        {
          "Title": "Cockpit | \"CH\" bei IBAN-Nummer im Installer soll bei Eingabe von \"ch\" autom. UPPERCASE gespeichert werden (anstatt ein Validation-Fehler anzuzeigen) {6h}",
          "Description": "<p>Motiviation<br>-------------------------------------------------<br>IBAN Nummern m&uuml;ssen &uuml;ber UpperCase sein</p>\n<p>Beschreibung<br>-------------------------------------------------<br>Alle Chars sollen UPPERCASE sein.</p>\n<p>Akzeptanzkriterien<br>------------------------------------------------<br>* Keine LowerCase Zeichen m&ouml;glich<br>* Automatische Konvertierung zu UpperCase</p>\n<p>Tests<br>--------------------------------------------<br>* Keine</p>\n<p>&nbsp;</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 2,
          "Tags": [
            {
              "Title": "Usability",
              "Color": "#6fd9bb"
            }
          ],
          "Users": [
            {
              "_id": "c7111522-f519-4fa2-ae80-070e2212c7e8",
              "Username": "Dario",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": false,
              "Text": "Control von GSM7 Input kopieren und eigenes Control machen"
            },
            {
              "IsDone": false,
              "Text": "In Char Replace von GSM7 Input Logik durch ToUpper ersetzen"
            }
          ]
        },
        {
          "Title": "Cockpit | Neuer Installer Abrechnungsintervall ändern",
          "Description": "<p>Beschreibung<br>-----------------------------------<br>&Auml;ndern von Abrechnungsintervall erzeugt einen Fehler im neuen Installer</p>\n<p>&nbsp;</p>\n<p><img src=\"https://trello.com/1/cards/642c3aa111c278aa4785790a/attachments/642c411e09daba6cc572bf2c/previews/642c411e09daba6cc572bf3b/download/image.png\"></p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 1,
          "TotalChecks": 1,
          "Tags": [
            {
              "Title": "Bug",
              "Color": "#ff2e6f"
            }
          ],
          "Users": [
            {
              "_id": "3c6bd114-cc67-4cfd-86c6-b8eab15b8fa6",
              "Username": "Patrik",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": true,
              "Text": "Bug korrigieren"
            }
          ]
        }
      ]
    },
    {
      "Title": "Ready to Release",
      "Tickets": [
        {
          "Title": "*** DEMO ***",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Performance Optimierungen für Config [7.73.0]",
          "Description": "<p>Beschreibung<br>----------------------------------------<br>Unter .NET Core ist die Performance bei hohen Request zahlen schlecht. Es f&uuml;hrt sogar zu Timeouts</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 1,
          "TotalChecks": 1,
          "Tags": [
            {
              "Title": "Bug",
              "Color": "#ff2e6f"
            }
          ],
          "Users": [
            {
              "_id": "c7111522-f519-4fa2-ae80-070e2212c7e8",
              "Username": "Dario",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": true,
              "Text": "Performance "
            }
          ]
        },
        {
          "Title": "Cockpit | Designoptimierung Standortdetail {4h} [7.73.0]",
          "Description": "<p>## Motivation<br>Platz auf der Maske \"Standort bearbeiten\" wird nicht optimal genutzt, wichtige Teile sind nicht sichtbar.</p>\n<p>## Beschreibung<br>Folgende Optimierungen sollen in einem ersten Schritt gemacht werden (siehe Mockup):<br>- linke Spaltenbreite reduzieren, beide Spalten gleich breit, leerer Platz in der linken Spalte (rotes Kreuz) soll entfernt werden<br>- Gr&ouml;sse der Krisenteam-K&auml;stchen (gr&uuml;n markiert) um ca. 50% reduzieren<br>- rechte Gridspalte in \"Inhalte\" und \"Positionen\" vergr&ouml;ssern (blaue Pfeile)<br>- Reihenfolge \"Inhalte\" und \"Positionen tauschen (roter Pfeil)<br>- \"Inhalte\" und \"Audit\" per Default einklappen (gelb markiert)</p>\n<p>## Akzeptanzkriterien<br>gem. Mockup</p>\n<p>## Tests<br>ggf. bestehende GUI-Tests anpassen</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 1,
          "TotalChecks": 1,
          "Tags": [
            {
              "Title": "Usability",
              "Color": "#6fd9bb"
            }
          ],
          "Users": [
            {
              "_id": "ad28807b-adb6-4f9c-bfb3-b114c07a4524",
              "Username": "Pablo",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": true,
              "Text": "Designoptimierung "
            }
          ]
        },
        {
          "Title": "Cockpit | PostfachController auf .NET Core migrieren [7.73.0]",
          "Description": "<p>## Motivation</p>\n<p>Projekt &ldquo;[bi.zh.ch.notfall-app.web](http://bi.zh.ch.notfall-app.web \"&zwnj;\")&rdquo; soll auf .NET Core migriert werden.</p>\n<p>## Beschreibung</p>\n<p>Die API &ldquo;PostfachV5Controller&rdquo; muss in den Container &ldquo;emergency.ch.app.api&rdquo; migriert werden. Dazu muss ein API Controller erstellt werden und die ganze Business Logik so angepasst werden, dass diese aus dem .NET Core Projekt aufgerufen werden kann.</p>\n<p>Nach M&ouml;glichkeit sollen auch gleich Unit Tests f&uuml;r diese Logik implementiert werden.</p>\n<p>## Akzeptanzkriterien</p>\n<p>- API funktioniert auf .NET Core<br>- &Uuml;ber den NGINX Container kann die API Url auf .NET Core umgestellt werden und die Tests laufen durch.</p>\n<p>## Tests</p>\n<p>- Bestehende Tests funktionieren weiterhin<br>- Integration von Unit Tests wo es Sinn macht.</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 1,
          "TotalChecks": 1,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [
            {
              "_id": "354f7f0c-7ba2-431f-ba5c-4ff571349397",
              "Username": "Marco",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": true,
              "Text": "Tests"
            }
          ]
        },
        {
          "Title": "Cockpit | Rechnungsnummern - Umbau Response Request Models [7.73.0]",
          "Description": "<p>## Beschreibung</p>\n<p>Aktuell enthalten Response Models oft die selben State Informationen, welche immer wieder ben&ouml;tigt werden. z.B Sprachen, CurrentSprache, DefaultSprache, BenutzerRechte, Verwaltungseinheiten etc.</p>\n<p>Diese Properities k&ouml;nnen in eigene State Models/Interfaces abstrahiert werden. Welche von der API in dem Response Model zur&uuml;ckgegeben werden. Anstellen von DefaultSprache, CurrentSprache und Sprachen k&ouml;nnte das Response Objekt nur ein SpracheState Objekt enthalten.</p>\n<p>Zudem sollen Konventionen erstellt werden, wo die Request und Response Interfaces und shared State Interfaces im Client abgelegt werden sollen. Die Namings der StateInterfaces sollen in Konvetionen dokumentiert werden.</p>\n<p>## Akzeptanzkriterien</p>\n<p>- Alle guidelines wurden beachtet<br>- Tests sind gr&uuml;n</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 2,
          "TotalChecks": 2,
          "Tags": [
            {
              "Title": "Architecture",
              "Color": "#ffc547"
            }
          ],
          "Users": [
            {
              "_id": "afc8a08c-408e-4991-9d47-53f6de45027a",
              "Username": "Jonas",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": true,
              "Text": "Request / Response models erstellen (in front und backend)"
            },
            {
              "IsDone": true,
              "Text": "Services und Controllers anpassen"
            }
          ]
        },
        {
          "Title": "Cockpit | Prototyp mit MAUI [7.73.0]",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [
            {
              "Title": "Feature",
              "Color": "#0bb4ff"
            }
          ],
          "Users": [
            {
              "_id": "afc8a08c-408e-4991-9d47-53f6de45027a",
              "Username": "Jonas",
              "Boards": []
            }
          ],
          "Tasks": []
        },
        {
          "Title": "*** DONE ***",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "*** REDO ***",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "*** OK BUT WAIT FOR RELEASE ***",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "*** On Hold ***",
          "Description": "",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 0,
          "TotalChecks": 0,
          "Tags": [],
          "Users": [],
          "Tasks": []
        },
        {
          "Title": "Cockpit | Kontrolle Vorlage bei Alarmplan mit verlinktem Krisenteam",
          "Description": "<p>Beschreibung<br>-------------------------------------<br>Wird ein Alarmplan erstellt, welcher ein Verlinktes Krisenteam verwendet, so wird beim Versand &uuml;ber den App Content die falsche Standortspezifische Vorlage verwendet.</p>",
          "PullRequestUrl": "",
          "TestRunUrl": "",
          "CompletedChecks": 2,
          "TotalChecks": 2,
          "Tags": [],
          "Users": [
            {
              "_id": "afc8a08c-408e-4991-9d47-53f6de45027a",
              "Username": "Jonas",
              "Boards": []
            }
          ],
          "Tasks": [
            {
              "IsDone": true,
              "Text": "Fehler reproduzieren"
            },
            {
              "IsDone": true,
              "Text": "Fehler beheben"
            }
          ]
        }
      ]
    }
  ]
},{
  "_id": {
    "$binary": {
      "base64": "aPEb7SFpL0OWA3/phyxoXQ==",
      "subType": "03"
    }
  },
  "Owner": "8309d09f-9a32-401e-ac04-52fdef9a37c3",
  "InviteCode": "L29BNI",
  "Title": "Support",
  "Columns": []
},{
  "_id": {
    "$binary": {
      "base64": "gSL2/Rw5nEiZNiM0SfB8Nw==",
      "subType": "03"
    }
  },
  "Owner": "8309d09f-9a32-401e-ac04-52fdef9a37c3",
  "InviteCode": "SY01EO",
  "Title": "Heidak",
  "Columns": [
    {
      "Title": "Development",
      "Tickets": []
    }
  ]
},{
  "_id": {
    "$binary": {
      "base64": "QYAtbAJhLUefRmG8wYxM9A==",
      "subType": "03"
    }
  },
  "Owner": "8309d09f-9a32-401e-ac04-52fdef9a37c3",
  "InviteCode": "2GBIGT",
  "Title": "Schnuppis",
  "Columns": [
    {
      "Title": "",
      "Tickets": []
    },
    {
      "Title": "",
      "Tickets": []
    },
    {
      "Title": "",
      "Tickets": []
    },
    {
      "Title": "",
      "Tickets": []
    }
  ]
}]